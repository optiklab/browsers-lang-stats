#!/bin/sh

BROWSER_DEV=$1

[ -z $BROWSER_DEV ] && { echo 'Missing path to repo argument'; exit 1; }

# count lines of code by file extension
git_loc()
{
  stats_total=$(git ls-files -z "$@" | wc -l --files0-from=- | tail -n 1)
  echo "${stats_total% total}"
}

echo_header()
{
  echo '{'
}

echo_footer()
{
  echo '}'
}

echo_data_header()
{
  echo '"langChrm": ['
}

echo_data_footer()
{
  echo '],'
}

echo_markdown_header()
{
  echo '"recentMarkdown": ['
}

echo_markdown_footer()
{
  echo '],'
}

# print a markdown file entry
echo_markdown_line()
{
  echo "{\"file\":\"$1\", \"lastModified\":\"$2\"}$3"
}

# print a row for a diagram
echo_data_line()
{
  echo "{\"name\":\"$1\", \"loc\":$2}$3"
}

echo_meta_date()
{
  echo "\"meta_date\": \"$1\"$2"
}

echo_title_date()
{
  echo "\"title_date\": \"$1\"$2"
}

cd $BROWSER_DEV

echo_header

echo_meta_date "$(date -u --iso-8601=seconds)" ','
echo_title_date "$(date +'%b %Y')" ','

echo_data_header

# We can't distinguish between CPP and C headers by file extension
# But we know that ratio of CPP to C files in the project is 2 to 1
# So we will add 2/3 of headers LOCs to CPP lines and 1/3 to C lines
echo_data_line 'Rust' $(git_loc '*.rs') ','
echo_data_line 'H' $(git_loc '*.h') ','
echo_data_line 'C' $(git_loc '*.c') ','
echo_data_line 'C++, Hxx' $(git_loc '*.cc' '*.cpp' '*.cxx' '*.hxx') ','
echo_data_line 'ObjC' $(git_loc '*.mm') ','
echo_data_line 'Build files (gn, gni)' $(git_loc '*.gn' '*.gni') ','
echo_data_line 'TypeScript' $(git_loc '*.ts' '*.tsx') ','
echo_data_line 'JavaScript' $(git_loc '*.jsm' '*.jsx' '*.js') ','
echo_data_line 'HTML' $(git_loc '*.htm' '*.html' '*.xhtml' '*.xht' '*.css') ','
echo_data_line 'Python' $(git_loc '*.py') ','
echo_data_line 'Java' $(git_loc '*.java') ','
echo_data_line 'Assembly' $(git_loc '*.asm')

echo_data_footer

echo_markdown_header

# Get 25 most recently updated markdown files with their last modification date
# Create temporary file to store results
temp_file=$(mktemp)
git ls-files '*.md' | \
  head -n 100 | \
  xargs -I {} git log -1 --format="%ai|{}" -- {} 2>/dev/null | \
  sort -r | \
  head -n 25 > "$temp_file"

# Process the results and add appropriate commas
total_lines=$(wc -l < "$temp_file")
current_line=0

while IFS='|' read -r date file; do
  if [ -n "$file" ]; then
    current_line=$((current_line + 1))
    if [ $current_line -eq $total_lines ]; then
      echo_markdown_line "$file" "$date"
    else
      echo_markdown_line "$file" "$date" ','
    fi
  fi
done < "$temp_file"

rm "$temp_file"

echo_markdown_footer

# Don't close the JSON here - let the Firefox script close it
# echo_footer

cd - > /dev/null
